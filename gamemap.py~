from images import *
from widget import *



class GameMap(Widget):
	def init(self):
		self.commands = []
		self.children = []
		self.terrain = {}
		self.features = {}
		self.entities = {}
		self.rect = pygame.Rect((0,0), self.parent.rect.size)
		self.image = get_surface(self.rect.size, self.bcolor)
		if 'focus' not in self:
			self.focus = self.parent.focus
		self.camera = (self.focus.x - 9) * self.parent.cell, (self.focus.y - 9) * self.parent.cell
		self.focus.set_fov(self.area.fov_mask)
		self.fov = self.focus.fov.copy()
		self.build_view()
		self.refresh()
	def build_view(self):
		rects = []
		old_terrain = set(self.terrain)
		new_terrain = self.area.terrain.get_nodes(self.fov)
		new_nodes = new_terrain.difference(old_terrain)
		dead_nodes = old_terrain.difference(new_terrain)
		for node in new_nodes:
			terrain = Terrain(self, pos = (node.x * self.parent.cell, node.y * self.parent.cell), owner = node)
			self.terrain[node] = terrain
			rects.append(terrain.rect)
		for node in dead_nodes:
			if node.pos not in self.focus.brain.floors:
				rects.append(self.terrain[node].rect)
				del self.terrain[node]
		old_features = set(self.features)
		new_features = self.area.features.get_nodes(self.fov)
		new_nodes = new_features.difference(old_features)
		dead_nodes = old_features.difference(new_features)
		for node in new_nodes:
			feature = Feature(self, pos = (node.x * self.parent.cell, node.y * self.parent.cell), owner = node)
			self.features[node] = feature
			rects.append(feature.rect)
		for node in dead_nodes:
			if node.pos not in self.focus.brain.walls:
				rects.append(self.features[node].rect)
				del self.features[node]		
		old_entities = set(self.entities)
		new_entities = self.area.entities.get_nodes(self.fov)
		new_nodes = new_entities.difference(old_entities)
		dead_nodes = old_entities.difference(new_entities)
		for node in new_nodes:
			rects.append(self.add_entity_sprite(node))
		for node in dead_nodes:
			rects.append(self.entities[node].rect)
			del self.entities[node]
		return rects
	def add_entity_sprite(self, node):
		entity = Entity(self, pos = (node.x * self.parent.cell, node.y * self.parent.cell), owner = node)
		self.entities[node] = entity
		return entity.rect
	def refresh(self, rects = None):
		if rects is None: rects = [self.rect]
		self.draw(self.parent.display)
		self.parent.dirty_rects += rects
		for gui in self.parent.stack:
			if gui == self: continue
			if gui.rect.collidelist(rects) != -1:
				gui.refresh()
	def draw(self, screen):
		self.image.fill(self.bcolor)
		for child in self.terrain.values():
			xy = child.rect.left - self.camera[0], child.rect.top - self.camera[1]
			if child.owner.pos in self.focus.fov:
				self.image.blit(child.image, xy)
			else:
				self.image.blit(child.memory_image, xy)				
		for child in self.features.values():
			xy = child.rect.left - self.camera[0], child.rect.top - self.camera[1]
			if child.owner.pos in self.focus.fov:
				self.image.blit(child.image, xy)
			else:
				self.image.blit(child.memory_image, xy)
		for child in self.entities.values():
			xy = child.rect.left - self.camera[0], child.rect.top - self.camera[1]
			self.image.blit(child.image, xy)
		for child in self.children:
			xy = child.rect.left - self.camera[0], child.rect.top - self.camera[1]
			self.image.blit(child.image, xy)
		screen.blit(self.image, self.rect.topleft)	
	def apply_command(self):
		if self.commands != []:
			if self.commands[0] > 0 and self.commands[0] < 9:
				self.handler.move_entity(self.focus, COMMANDS[self.commands[0]])
			if self.commands[0] == 10:
				self.handler.wait_entity(self.focus)
			self.commands.pop(0)
	def key_press(self, key):
		self.commands.append(key)
	def cursor_lclick(self, cursor):
		for sprite in self.terrain.values():
			if sprite.contains_point(cursor.rect.center):
				print str(sprite.owner)
	def tick(self, focus):
		camera = (self.focus.x - 9) * self.parent.cell, (self.focus.y - 9) * self.parent.cell
		refresh = False
		if self.focus != focus:
			self.data['focus'] = focus
			self.focus = focus
			self.init()
			return
		for child in list(self.children):
			if child.tick(focus) == True: refresh = True
		if focus.fov.points != self.fov.points:
			self.fov = focus.fov.copy()
			dirty_rects = self.build_view()
		for sprite in self.entities.values():
			if sprite.moving: refresh = True
			if sprite.follow_path() == True: refresh = True
		if self.camera != camera:
			step = get_step(camera, self.camera, self.parent.cell / 3)
			self.camera = self.camera[0] + step[0], self.camera[1] + step[1]
			refresh = True
		if refresh: self.refresh()





class Terrain(Widget):
	def init(self):
		self.rect = pygame.Rect(self.pos, self.parent.parent.cell_size)
		if self.owner['chasm']:
			self.image = self.parent.parent.images['chasm']
		else:
			self.image = self.parent.parent.images['floor']
		self.memory_image = self.parent.parent.images['floor_memory']	
	def translate(self, pos):
		return pos[0] + self.parent.camera[0], pos[1] + self.parent.camera[1]

class Feature(Widget):
	def init(self):
		self.rect = pygame.Rect(self.pos, self.parent.parent.cell_size)
		self.image = self.parent.parent.images['wall']
		self.memory_image = self.parent.parent.images['wall_memory']

class Entity(Widget):
	def init(self):
		self.path = []
		self.moving = False
		self.rect = pygame.Rect(self.pos, self.parent.parent.cell_size)
		if self.owner == self.parent.focus:		
			self.image = self.parent.parent.images['hero']
		else:
			self.image = self.parent.parent.images['monster']
	def float_text(self, txt, clr):
		size = get_text_size(txt)
		xy = self.rect.centerx - (size[0] / 2), self.rect.bottom - size[1]
		float_text = FloatText(self.parent, pos = xy, text = txt, color = clr, timer = 0)
		self.add_to_path(float_text)
	def add_to_path(self, obj):
		if obj is False or hasattr(obj, 'image'): self.path.append(obj)
		else:	
			xy = int(obj[0] * self.parent.parent.cell), int(obj[1] * self.parent.parent.cell)
			self.path.append(xy)
	def follow_path(self):
		self.moving = False
		if self.path != []:
			if hasattr(self.path[0], 'image'):
				self.parent.children.append(self.path[0])
				size = get_text_size(txt)
				xy = self.rect.centerx - (size[0] / 2), self.rect.bottom - size[1]
				self.path[0].pos = xy
				self.path.pop(0)
			elif self.path[0] == False:
				del self.parent.entities[self.owner]
			else:
				self.moving = True
				speed = self.parent.parent.cell / 4 + len(self.path)
				step = get_step(self.path[0], self.rect.topleft, speed)
				self.rect.topleft = self.rect.left + step[0], self.rect.top + step[1]
				if self.rect.topleft == self.path[0]:
					self.path.pop(0)
			return True
		


class FloatText(Widget):
	def init(self):
		self.rect = pygame.Rect(self.pos, self.parent.parent.cell_size)
		self.image = get_text(self.text, self.color)
	def translate(self, pos):
		return pos[0] + self.parent.camera[0], pos[1] + self.parent.camera[1]
	def tick(self, focus):
		self.timer += 1
		new_color = darken(self.color, 5)
		new_pos = self.pos[0], self.pos[1] - (self.parent.parent.cell / 20)
		self.overwrite(pos = new_pos, color = new_color)
		if self.timer > 20:
			self.parent.children.remove(self)
			return True
		return True		


		
